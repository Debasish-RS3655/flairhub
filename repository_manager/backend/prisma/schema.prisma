generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "linux-musl-openssl-3.0.x"]
  // uncomment this line in windows  
  // binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum CommitStatus {
  PENDING
  REJECTED
  MERGED
  MERGERCOMMIT // the merger commit is the commit that is created after the pending commits have been merged
}

// user model needed to be created
model User {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  username          String?       @unique
  metadata          UserMetadata? // the metadata to be displayed for the user, by default not required
  wallet            String        @unique // walet address of the user
  repositories      Repository[] // repositories created by the user
  commits           Commit[] // commits created by the user
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @default(now())
  nftCredit         Int           @default(100)
  lastCreditUpdated DateTime      @default(now())
}

model Repository {
  id             String             @id @default(auto()) @map("_id") @db.ObjectId
  name           String // name of the repository needs to be mandatorily as a main parameter
  repoHash       String             @unique
  branches       Branch[] // a single repository might contain serveral branches
  writeAccessIds String[]           @default([]) // list of wallet addresses of the contribtors who can write to the repository. Iniitialized with the wallet addrdess of the creator
  adminIds       String[]           @default([]) // list of admins that can give and revoke write permissions and delete the repository
  contributorIds String[]           @default([]) // initialized
  metadata       RepositoryMetdata? // optional metadata that needs to be added
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @default(now()) // timestamp of the latest update
  // the owner of the repository
  ownerAddress   String
  ownerId        String             @db.ObjectId
  owner          User               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  // base model
  baseModelHash  String?            @unique
  baseModel      BaseModelData?
  // the base model Uri will be calculated based on the existing IPFS gateway
  // baseModelUri   String?
  collection     Collection?        @relation(fields: [collectionId], references: [id])
  collectionId   String?            @unique @db.ObjectId

  @@unique([ownerAddress, name])
}

// repository contains branches
model Branch {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  name         String // name of the branch
  branchHash   String             @unique
  description  String? // description of the branch's purpose
  latestParams String? // base64 encoded model parameters for the latest mode parameters
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @default(now()) // timestamp of the last commit
  commits      Commit[] // commits in that branch
  // the repository to which the branch belongs
  repositoryId String             @db.ObjectId // repository id for this branch
  repository   Repository         @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  SharedFolder SharedFolderFile[] // shared folder is basically an array of shared folder files
}

// branches contain commits
// a single commit happens from only a single person
// not like the way currently federated learning happens
model Commit {
  id                   String       @id @default(auto()) @map("_id") @db.ObjectId
  commitHash           String       @unique // hash of the current commit
  status               CommitStatus // the status of this particuar commit
  rejectedMessage      String? // (Optional) Fwhy the commit was rejected in case it was rejected.  
  message              String // commit message
  paramHash            String       @unique // hash of the parmeters for the commit
  params               Params? // the param is stored as a separate model
  createdAt            DateTime     @default(now()) // when the commit was created  
  statusUpdatedAt      DateTime?
  // there will be no distinct local and merged parameters, the merged parameters would be included as a new commit
  // for a merger commit, this will be the merged parameters
  // for an accepted commit this will be the local parameters
  // for the current version the metric is an optional field
  metrics              Metric? // the metrics of the model (e.g. accuracy, loss etc.)
  architecture         String // new field included
  // which branch the commit belongs to
  branchId             String       @db.ObjectId
  // when the branch is deleted so are the commmits in the branch
  branch               Branch       @relation(fields: [branchId], references: [id])
  // committer data included with new user model created
  committerAddress     String // wallet address of the contributor  
  // when the user is deleted the commit is not deleted
  committerId          String       @db.ObjectId
  committer            User         @relation(fields: [committerId], references: [id])
  // a commit is only soft deleted
  isDeleted            Boolean      @default(false)
  // Nft converted commit properties
  nft                  Nft?         @relation("CommitToNft", fields: [nftId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  nftId                String?      @unique @db.ObjectId
  verified             Boolean      @default(false) // if the ZKML proof of the model has been verified
}

// the parameters are going to be a large file so its better to store in in its own schema
model Params {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  // this is the only thing that needs to be changed
  // params will now be the shared folder structure
  // params      String     @unique // base64 encoded blosc compressed parameters 
  sharedFolderId   String            @unique @db.ObjectId
  sharedFolderFile SharedFolderFile? @relation(fields: [sharedFolderId], references: [id]) // points to the shared folder file
  commitId         String            @unique @db.ObjectId // needs to be unique for a one to one relationship
  commit           Commit            @relation(fields: [commitId], references: [id])
  ZKMLProof        ZKMLProof?        @relation("paramToProof", fields: [zkmlProofId], references: [id], onDelete: SetNull)
  zkmlProofId      String?           @unique @db.ObjectId
}

// defining the shared folder model for storing the latest training data
model SharedFolderFile {
  id                         String   @id @default(auto()) @map("_id") @db.ObjectId
  branchId                   String   @db.ObjectId
  // when the branch is deleted so are the commmits in the branch
  branch                     Branch   @relation(fields: [branchId], references: [id])
  params                     Params? // back relation to the params object, non included shared folders in commits will not have the params property fulled
  committerAddress           String   @db.ObjectId // who has done the training
  metrics_after_aggregation  Bytes[] // bytes array for the metrics before aggregation
  metrics_before_aggregation Bytes[] // bytes array for the metrics after aggregation
  // for the current version we are not storing the model after aggregation
  model                      Bytes? // stores the pickled model of that file
  createdAt                  DateTime @default(now()) // we always need the latest shared folder for this branch and this user
}

model ZKMLProof {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  proof            String  @unique // the proof of the model
  settings         String  @unique // the settings of the proof
  verification_key String  @unique // the verification key of the proof
  param            Params? @relation("paramToProof")
  paramId          String? @unique @db.ObjectId
}

// These schemas can never be deleted
// merkleTree model that stores the current merkle tree adress and how many can be implemented
// only admin accessible
model MerkleTree {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  mintAuthority   String // public key of the wallet that has mint authority on this merkleTree
  active          Boolean  @default(false) // if this is the current merkle tree that is being used
  address         String   @unique // public key of the merkle tree
  signature       String   @unique // signature of the merkle tree creation signature
  secret          String   @unique // secret key of the merkle tree
  assetIds        String[] @unique // the assetIds minted in this merkle tree
  totalLeaves     Int // total leaves in the merkle tree
  remainingLeaves Int // leaves remaining where NFTs can be minted
  createdAt       DateTime @default(now())
}

// details for the nft collection i.e. a repository
model Collection {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  address     String      @unique
  signature   String      @unique
  privateKey  String      @unique
  owner       String
  repository  Repository?
  nft         Nft[]
  createdAt   DateTime    @default(now())
  metadataCID String? // metadata of the collection uploaded to IPFS
}

// details of the nft
model Nft {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  assetId           String      @unique
  merkleTreeAddress String
  signature         String      @unique
  owner             String
  createdAt         DateTime    @default(now())
  // back relation to the commit schema
  commit            Commit?     @relation("CommitToNft")
  collection        Collection? @relation(fields: [colectionId], references: [id])
  colectionId       String      @unique @db.ObjectId
  metadataCID       String? // CID of the metadata of the Nft uploaded to IPFS
}

type Metric {
  accuracy Float
  loss     Float
}

// metadata type as an embedded document
type UserMetadata {
  name         String?
  email        String?
  displayText  String?
  profileImage String? // base 64 encoded image of the user
  bio          String? // bio of the user
}

type RepositoryMetdata {
  name        String
  description String?
  useCase     String?
  creator     String // wallet address that has created the Repository
  framework   String
}

// the base model data must also include its details now
type BaseModelData {
  extension String
  size      Float
}
