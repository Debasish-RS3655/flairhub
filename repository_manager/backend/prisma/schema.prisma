// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// initially supporting only two frameworks
enum Framework {
  PYTORCH
  TENSORFLOW
}

enum CommitStatus {
  PENDING
  REJECTED
  MERGED
}

model Repository {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  creator        String // creator will also be a wallet address only
  framework      Framework // framework remains constant for a repository
  contributorIds String[]  @db.ObjectId
  metadata       Json?
  fileUri        String // The uri of the inital model (preferably in S3 storage)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) // timestamp of the latest update
  branches       Branch[] // a single repository might contain serveral branches
}

// repository contains branches
model Branch {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String // name of the branch
  description  String? // description of the branch's purpose
  initalParams String // base64 encoded model parameters for the initial model
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) // timestamp of the last commit
  commits      Commit[] // commits in that branch
  repositoryId String     @db.ObjectId // repository id for this branch
  Repository   Repository @relation(fields: [repositoryId], references: [id])
}

// branches contain commits
// a single commit happens from only a single person
// not like the way currently federated learning happens
model Commit {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  status         CommitStatus // the status of this particuar commit
  contributor    String // wallet address of the contributor  
  message        String // commit message
  paramHash      String // hash of the parmeters for the commit
  params         Params? // the param is stored as a separate model
  createdAt      DateTime     @default(now()) // when the commit was created  
  localAccuracy  String
  localLoss      String
  mergedAccuracy String? // updated only after the commit has been merged
  mergedLoss     String?
  branchId       String       @db.ObjectId
  branch         Branch       @relation(fields: [branchId], references: [id])
}

// the parameters are going to be a large file so its better to store in in its own schema
model Params {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  params    String // base64 encoded blosc compressed parameters 
  zkmlProof String? // ZKML proof for the current model
  commitId  String  @unique @db.ObjectId // needs to be unique for a one to one relationship
  commit    Commit  @relation(fields: [commitId], references: [id])
}
